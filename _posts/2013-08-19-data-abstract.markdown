---
layout: post
title: "数据抽象"
date: 2013-08-19 21:58
comments: true
categories: Program
tags: C++ Program Xmind
---

最近在看C++基础准备面试，就重新把《C++编程思想》重新翻一遍，顺便把之前遗漏的章节总结下，思维导图整理一下。

![数据抽象](/assets/2013-08-19-data-abstract.png)

## 类型大小

### struct与union

由于存储变量时地址对齐的要求，编译器在编译程序时会遵循的原则：

* 数据成员对齐规则：每个数据成员的起始位置要从该成员大小的整数倍开始

* 数据成员包含结构体：结构体成员要从其内部最大元素大小的整数倍地址开始存储

* 结构体大小：必须是其内部最大基本成员的整数倍，不足的要补齐

在网上搜的时候都是这么说的，不过我在检查的时候却发现是有些出入的。下面这个结构体：

{% highlight c %}
    struct align {
        char c1;
        double d;
        char c2;
    };
{% endhighlight %}

这个结构体的大小是16，其中d和c1的地址相差4。而另外一个就不那么规整了：

{% highlight c %}
    struct align {
        double d;
        char c1;
        char c2;
    };
{% endhighlight %}

这个结构体的大小竟然是12，不是double大小的倍数了。

对于union，对齐的大小是最大的基本元素的大小，对象的大小必须是该基本元素大小的整数倍。

## 无数据成员的结构

无数据成员的结构总应当有最小的非零长度

### 含虚函数的类

不带虚函数，对象的长度恰好就是所期望的长度（数据成员的总长）；如果有一个或多个虚函数，编译器都只在这个结构中插入单个指针(VPTR)

如果类没有数据成员，会插入一个“哑”成员到对象中(长度一般为1)。
